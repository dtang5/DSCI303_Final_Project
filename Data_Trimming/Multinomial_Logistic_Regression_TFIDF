{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Multinomial_Logistic_Regression_TFIDF","provenance":[{"file_id":"1lA_G11CLzCdHdY3sfXdmISaVwIDwPf15","timestamp":1575146800182},{"file_id":"1Nhq2MohlePHJ-FpZWsKP8BI8MZkEBNAJ","timestamp":1575145814698}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"BqpW0ZHo7d_X","colab_type":"code","colab":{}},"source":["import json\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FMWwQj0lCZqM","colab_type":"code","outputId":"3775dc16-bd90-493f-f69d-fb9751e438b7","executionInfo":{"status":"ok","timestamp":1575249924656,"user_tz":360,"elapsed":17922,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yEFiNGrj8AML","colab_type":"code","colab":{}},"source":["root_path = '/content/drive/My Drive/DSCI 303 Final Project/Data_Trimming/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"syimYoiu7jAc","colab_type":"code","colab":{}},"source":["with open(root_path + 'preprocessed_150k_reviews.json') as json_file: # Open json file to load\n","    d = json.load(json_file) # Load the data as a string\n","    data = json.loads(d) #convert to list of dictionaries"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vVg5M5LJyaec","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"5heRpu637kGe","colab_type":"code","colab":{}},"source":["df = pd.DataFrame(data) # Convert list of dictionaries {review, stars} to dataframe"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dml9PZxT_B7Q","colab_type":"code","outputId":"26d37533-c9e2-4e89-bbd8-ce164bff28e0","executionInfo":{"status":"ok","timestamp":1575250218467,"user_tz":360,"elapsed":322,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":106}},"source":["df.head(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>stars</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>total bill horribl servic 8g crook actual ner...</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ador travi hard rock new kelli cardena salon ...</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review  stars\n","0   total bill horribl servic 8g crook actual ner...    1.0\n","1   ador travi hard rock new kelli cardena salon ...    5.0"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"tYLC5VbW_dLC","colab_type":"code","colab":{}},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","corpus = df['review']\n","vectorizer = TfidfVectorizer()\n","X_train_tfidf = vectorizer.fit_transform(corpus)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"haLcRq7R2iIY","colab_type":"code","outputId":"8a632b06-5067-4823-d3c6-09cd81c8df98","executionInfo":{"status":"ok","timestamp":1575250240465,"user_tz":360,"elapsed":304,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_train_tfidf.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150000, 67816)"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"N0YKK9T_WAFn","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split, cross_val_score\n","x_train, x_test, y_train, y_test = train_test_split(X_train_tfidf,df['stars'],test_size=0.2, random_state = 101)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ya4nPfD6Qo3G","colab_type":"code","outputId":"db29149f-c8f5-4b43-c137-40107a7650f6","executionInfo":{"status":"ok","timestamp":1575250730026,"user_tz":360,"elapsed":305,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x_train.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120000, 67816)"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"BfX2CFG2SRtg","colab_type":"code","outputId":"aedab3d9-c373-4148-a634-92f32e2d981e","executionInfo":{"status":"ok","timestamp":1575251637948,"user_tz":360,"elapsed":32843,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["from sklearn.linear_model import LogisticRegression\n","clf = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"CdQBloXrSn6J","colab_type":"code","outputId":"c733f37f-92f0-4733-bdcc-78d5f1b48f73","executionInfo":{"status":"ok","timestamp":1575251641067,"user_tz":360,"elapsed":339,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["predicted = clf.predict(x_test)\n","np.mean(predicted == y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6648333333333334"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"rmptvb3uTnZ8","colab_type":"code","outputId":"2f981e48-dca4-443b-d588-c08e0909a483","executionInfo":{"status":"error","timestamp":1575257362151,"user_tz":360,"elapsed":5271784,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["#tuning the hyperparameters\n","scores = []\n","for max_iterations in np.arange(100,1000,100):\n","  curr_clf = LogisticRegression(random_state=0, max_iter = max_iterations, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","  rfc_cv_scores = cross_val_score(curr_clf, x_train, y_train, cv=8)\n","  print(\"CV with {} iterations:\".format(max_iterations))\n","  print(rfc_cv_scores)\n","  scores.append(rfc_cv_scores)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["CV with 100 iterations:\n","[0.65642291 0.66206667 0.6614     0.6676     0.65933333 0.66033333\n"," 0.6612     0.66617775]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["CV with 200 iterations:\n","[0.65835611 0.6634     0.66233333 0.6678     0.6598     0.65973333\n"," 0.66066667 0.66691113]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["CV with 300 iterations:\n","[0.65922272 0.66286667 0.66286667 0.6676     0.65893333 0.65946667\n"," 0.66033333 0.66677779]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["CV with 400 iterations:\n","[0.65915606 0.66293333 0.66266667 0.66773333 0.6594     0.6598\n"," 0.66       0.66671111]\n","CV with 500 iterations:\n","[0.65915606 0.66293333 0.66266667 0.66773333 0.6594     0.6598\n"," 0.66       0.66671111]\n","CV with 600 iterations:\n","[0.65915606 0.66293333 0.66266667 0.66773333 0.6594     0.6598\n"," 0.66       0.66671111]\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-b918d8ded817>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mmax_iterations\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0mcurr_clf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax_iterations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'lbfgs'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_class\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'multinomial'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0mrfc_cv_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurr_clf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"CV with {} iterations:\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_iterations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrfc_cv_scores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    389\u001b[0m                                 \u001b[0mfit_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m                                 \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 391\u001b[0;31m                                 error_score=error_score)\n\u001b[0m\u001b[1;32m    392\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'test_score'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    230\u001b[0m             \u001b[0mreturn_times\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_estimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreturn_estimator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m             error_score=error_score)\n\u001b[0;32m--> 232\u001b[0;31m         for train, test in cv.split(X, y, groups))\n\u001b[0m\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m     \u001b[0mzipped_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1004\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    833\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 834\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    835\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    836\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    751\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    752\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 753\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    754\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    580\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    581\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 582\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    514\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 516\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    517\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1604\u001b[0m                       \u001b[0mpenalty\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpenalty\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1605\u001b[0m                       sample_weight=sample_weight)\n\u001b[0;32m-> 1606\u001b[0;31m             for class_, warm_start_coef_ in zip(classes_, warm_start_coef))\n\u001b[0m\u001b[1;32m   1607\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1608\u001b[0m         \u001b[0mfold_coefs_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iter_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfold_coefs_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1001\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1002\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1003\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1004\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    833\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 834\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    835\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    836\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    751\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    752\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 753\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    754\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    580\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    581\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 582\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 256\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m_logistic_regression_path\u001b[0;34m(X, y, pos_class, Cs, fit_intercept, max_iter, tol, verbose, solver, coef, class_weight, dual, penalty, intercept_scaling, multi_class, random_state, check_input, max_squared_sum, sample_weight, l1_ratio)\u001b[0m\n\u001b[1;32m    942\u001b[0m                 \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfprime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    943\u001b[0m                 \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 944\u001b[0;31m                 iprint=iprint, pgtol=tol, maxiter=max_iter)\n\u001b[0m\u001b[1;32m    945\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"warnflag\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m                 warnings.warn(\"lbfgs failed to converge. Increase the number \"\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36mfmin_l_bfgs_b\u001b[0;34m(func, x0, fprime, args, approx_grad, bounds, m, factr, pgtol, epsilon, iprint, maxfun, maxiter, disp, callback, maxls)\u001b[0m\n\u001b[1;32m    197\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m     res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n\u001b[0;32m--> 199\u001b[0;31m                            **opts)\n\u001b[0m\u001b[1;32m    200\u001b[0m     d = {'grad': res['jac'],\n\u001b[1;32m    201\u001b[0m          \u001b[0;34m'task'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'message'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36m_minimize_lbfgsb\u001b[0;34m(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;31m# until the completion of the current minimization iteration.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0;31m# Overwrite f and g:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 335\u001b[0;31m             \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc_and_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    336\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mtask_str\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'NEW_X'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0;31m# new iteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/lbfgsb.py\u001b[0m in \u001b[0;36mfunc_and_grad\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    283\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mfunc_and_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m             \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m             \u001b[0mg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjac\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/optimize.py\u001b[0m in \u001b[0;36mfunction_wrapper\u001b[0;34m(*wrapper_args)\u001b[0m\n\u001b[1;32m    325\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mwrapper_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0mncalls\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapper_args\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mncalls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunction_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/optimize/optimize.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, x, *args)\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0mfg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjac\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfg\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x, *args)\u001b[0m\n\u001b[1;32m    917\u001b[0m         \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mY_multi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    918\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msolver\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'lbfgs'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 919\u001b[0;31m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_multinomial_loss_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    920\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0msolver\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'newton-cg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    921\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_multinomial_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36m_multinomial_loss_grad\u001b[0;34m(w, X, Y, alpha, sample_weight)\u001b[0m\n\u001b[1;32m    345\u001b[0m     \u001b[0msample_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    346\u001b[0m     \u001b[0mdiff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 347\u001b[0;31m     \u001b[0mgrad\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0mn_features\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    348\u001b[0m     \u001b[0mgrad\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0mn_features\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0malpha\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    349\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfit_intercept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[0;34m(a, b, dense_output)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \"\"\"\n\u001b[1;32m    136\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0msparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m         \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdense_output\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"toarray\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/sparse/base.py\u001b[0m in \u001b[0;36m__rmul__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m                 \u001b[0mtr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mtr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m     \u001b[0;31m#####################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/sparse/base.py\u001b[0m in \u001b[0;36m__mul__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    470\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mul_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mN\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mul_multivector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misscalarlike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/sparse/compressed.py\u001b[0m in \u001b[0;36m_mul_multivector\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    485\u001b[0m         \u001b[0mfn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_sparsetools\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'_matvecs'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m         fn(M, N, n_vecs, self.indptr, self.indices, self.data,\n\u001b[0;32m--> 487\u001b[0;31m            other.ravel(), result.ravel())\n\u001b[0m\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"B2yzAUQuD0TQ","colab":{"base_uri":"https://localhost:8080/","height":319},"outputId":"d89ecb63-83fd-411e-aabd-bf7ce29b8816","executionInfo":{"status":"ok","timestamp":1575264357813,"user_tz":360,"elapsed":187225,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["#adding 50 iterations to the graph\n","curr_clf = LogisticRegression(random_state=0, max_iter = 50, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","rfc_cv_scores = cross_val_score(curr_clf, x_train, y_train, cv=8)\n","scores.insert(0, rfc_cv_scores)"],"execution_count":150,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"fwmH91-BFEE-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":319},"outputId":"c152114a-97fd-4828-f60d-a8ee0034f2aa","executionInfo":{"status":"ok","timestamp":1575264731325,"user_tz":360,"elapsed":94203,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["#adding 25 iterations to the graph\n","curr_clf = LogisticRegression(random_state=0, max_iter = 25, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","rfc_cv_scores = cross_val_score(curr_clf, x_train, y_train, cv=8)\n","scores.insert(0, rfc_cv_scores)"],"execution_count":165,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"4uDupAioDqiJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":319},"outputId":"81e22a47-d6cb-4d42-9f60-ef608e44d7f3","executionInfo":{"status":"ok","timestamp":1575264367214,"user_tz":360,"elapsed":194570,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["#adding 1 iterations to the graph\n","curr_clf = LogisticRegression(random_state=0, max_iter = 1, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","rfc_cv_scores = cross_val_score(curr_clf, x_train, y_train, cv=8)\n","scores.insert(0, rfc_cv_scores)"],"execution_count":151,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ZcxOg0efEE7S","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"outputId":"ed250518-9dc4-404c-b51e-8d92476786df","executionInfo":{"status":"ok","timestamp":1575264912653,"user_tz":360,"elapsed":661,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["scores"],"execution_count":166,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[array([0.63515766, 0.6418    , 0.6416    , 0.6482    , 0.63806667,\n","        0.632     , 0.63106667, 0.64490966]),\n"," array([0.65668955, 0.65753333, 0.657     , 0.6644    , 0.6588    ,\n","        0.65906667, 0.65653333, 0.66817788]),\n"," array([0.65642291, 0.66206667, 0.6614    , 0.6676    , 0.65933333,\n","        0.66033333, 0.6612    , 0.66617775]),\n"," array([0.65835611, 0.6634    , 0.66233333, 0.6678    , 0.6598    ,\n","        0.65973333, 0.66066667, 0.66691113]),\n"," array([0.65922272, 0.66286667, 0.66286667, 0.6676    , 0.65893333,\n","        0.65946667, 0.66033333, 0.66677779]),\n"," array([0.65915606, 0.66293333, 0.66266667, 0.66773333, 0.6594    ,\n","        0.6598    , 0.66      , 0.66671111]),\n"," array([0.65915606, 0.66293333, 0.66266667, 0.66773333, 0.6594    ,\n","        0.6598    , 0.66      , 0.66671111]),\n"," array([0.65915606, 0.66293333, 0.66266667, 0.66773333, 0.6594    ,\n","        0.6598    , 0.66      , 0.66671111])]"]},"metadata":{"tags":[]},"execution_count":166}]},{"cell_type":"code","metadata":{"id":"Gw8vap3_p-rF","colab_type":"code","outputId":"d0f8dbed-5a0a-43fc-fb31-598bf40034c1","executionInfo":{"status":"ok","timestamp":1575264918610,"user_tz":360,"elapsed":239,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":151}},"source":["avg_score = list(map(lambda x: np.mean(x), scores))\n","avg_score"],"execution_count":167,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.639100081266704,\n"," 0.6597750957360375,\n"," 0.6618167479570004,\n"," 0.662375071291815,\n"," 0.6622583962922225,\n"," 0.6623000629588152,\n"," 0.6623000629588152,\n"," 0.6623000629588152]"]},"metadata":{"tags":[]},"execution_count":167}]},{"cell_type":"code","metadata":{"id":"e7b4EnG7rRsI","colab_type":"code","colab":{}},"source":["iterations = list(np.arange(100,601,100))\n","iterations.insert(0,50)\n","iterations.insert(0,25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J2ZUtv93rhCB","colab_type":"code","outputId":"07549fcf-3483-471d-d234-143f5720d20f","executionInfo":{"status":"ok","timestamp":1575264929270,"user_tz":360,"elapsed":939,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["plt.plot(iterations, avg_score)\n","plt.xlabel('iterations')\n","plt.ylabel('average accuracy')\n","plt.title('Multinomial Logistic Regression Cross Validation')\n","plt.savefig(root_path + 'mult_logistic_reg_cross_val.jpg', bbox_inches='tight')"],"execution_count":169,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tQ6nJkstthuN","colab_type":"code","outputId":"1b8b91ea-70c0-43c6-c9a4-82609246e964","executionInfo":{"status":"ok","timestamp":1575259437139,"user_tz":360,"elapsed":116578,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clf400 = LogisticRegression(random_state=0, max_iter = 400, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","predicted = clf400.predict(x_test)\n","print(\"Test accuracy with 400 iterations:\", np.mean(predicted == y_test))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Test accuracy with 400 iterations: 0.6658333333333334\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"F5mwEZDnuq0o","colab_type":"code","outputId":"2c4cc64f-e7b9-4b29-b13c-80c983a38e6e","executionInfo":{"status":"ok","timestamp":1575258680362,"user_tz":360,"elapsed":64798,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["clf200 = LogisticRegression(random_state=0, max_iter = 200, solver='lbfgs', multi_class='multinomial').fit(x_train, y_train)\n","predicted = clf200.predict(x_test)\n","print(\"Test accuracy with 200 iterations:\", np.mean(predicted == y_test))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Test accuracy with 200 iterations: 0.6654\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:947: ConvergenceWarning: lbfgs failed to converge. Increase the number of iterations.\n","  \"of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"HTMS94S8QvHe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":185},"outputId":"db6ec5ac-6dfa-4d7a-ed7a-cf14de24752b","executionInfo":{"status":"ok","timestamp":1575260269796,"user_tz":360,"elapsed":4815,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["nltk.download('stopwords')\n","nltk.download('punkt')\n","!pip install num2words\n","\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import PorterStemmer\n","from num2words import num2words\n","\n","def convert_lower_case(data):\n","    return np.char.lower(data)\n","    \n","def remove_stop_words(data):\n","  \"\"\"\n","  Input: str\n","  Output: str\n","  Removes stop words like I, me, the, etc. For preprocessing the data\n","  \"\"\"\n","  stop_words = stopwords.words('english')\n","  words = word_tokenize(str(data))\n","  new_text = \"\"\n","  for w in words:\n","      if w not in stop_words and len(w) > 1:\n","          new_text = new_text + \" \" + w\n","  return new_text\n","\n","def remove_punctuation(data):\n","  \"\"\"\n","  Input: str\n","  Output: str\n","  Further preprocessing\n","  \"\"\"\n","  symbols = \"!\\\"#$%&()*+-./:;<=>?@[\\]^_`{|}~\\n\"\n","  for i in range(len(symbols)):\n","      data = np.char.replace(data, symbols[i], ' ')\n","      data = np.char.replace(data, \"  \", \" \")\n","  data = np.char.replace(data, ',', '')\n","  return data\n","\n","def remove_apostrophe(data):\n","  \"\"\"\n","  Input: str\n","  Output: str\n","  Further preprocessing\n","  \"\"\"\n","  return np.char.replace(data, \"'\", \"\")  \n","\n","\n","def stemming(data):\n","  \"\"\"\n","  Input: str\n","  Output: str\n","  Converts words to their stem. Ex: worked -> work. Removes suffix and affix. No need for lemmatization for TFIDF\n","  \"\"\"\n","  stemmer= PorterStemmer()\n","  \n","  tokens = word_tokenize(str(data))\n","  new_text = \"\"\n","  for w in tokens:\n","      new_text = new_text + \" \" + stemmer.stem(w)\n","  return new_text\n","\n","def convert_numbers(data):\n","    tokens = word_tokenize(str(data))\n","    new_text = \"\"\n","    for w in tokens:\n","        try:\n","            w = num2words(int(w))\n","        except:\n","            a = 0\n","        new_text = new_text + \" \" + w\n","    new_text = np.char.replace(new_text, \"-\", \" \")\n","    return new_text"],"execution_count":77,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","Collecting num2words\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/eb/a2/ea800689730732e27711c41beed4b2a129b34974435bdc450377ec407738/num2words-0.5.10-py3-none-any.whl (101kB)\n","\u001b[K     |████████████████████████████████| 102kB 3.8MB/s \n","\u001b[?25hRequirement already satisfied: docopt>=0.6.2 in /usr/local/lib/python3.6/dist-packages (from num2words) (0.6.2)\n","Installing collected packages: num2words\n","Successfully installed num2words-0.5.10\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gFg8K7H3Q6Ii","colab_type":"code","colab":{}},"source":["def preprocess(X):\n","  \"\"\"\n","  Input: X, raw data in the form of an iterable of strings\n","  Output: Preprocessed X in the form an iterable of strings\n","  \"\"\"\n","  \n","  X = map(lambda x: convert_lower_case(x), X) #Convert each review to lowercase\n","  X = map(lambda x: remove_punctuation(x), X) #Remove punctuation from each review\n","  X = map(lambda x: remove_apostrophe(x), X) #Remove apostrophes from each review\n","  X = map(lambda x: remove_stop_words(x), X) #Remove stop words from each review\n","  X = map(lambda x: convert_numbers(x), X) #Convert numerics to string equivalents\n","  X = map(lambda x: stemming(x), X) #Stem all the words from each review\n","  X = map(lambda x: remove_punctuation(x), X) #Repeated just in case punctuation was reintroduced\n","  X = map(lambda x: convert_numbers(x), X) #Just in case more numbers were reintroduced\n","  X = map(lambda x: stemming(x), X) #Just in case numbers needed to be stemmed again \n","  X = map(lambda x: remove_punctuation(x), X) #Repeated because num2words does give some hyphens and commas\n","  X = map(lambda x: remove_stop_words(x), X) #Repeated because num2words does give stop words\n","  return list(X)\n","\n","def tfidf_predict_rating_logistic(trained_skmodel, tfidf_vectorizer, unpreprocessed_data):\n","  \"\"\"\n","  trained_skmodel: the logistic regression trained model returned by sklearn (after fit) \n","  tfidf_vectorizer: the vectorizer used (after applying fit_transform). Used to convert unseen raw data to tfidf);\n","  unpreprocessed_data: an array or dataframe column of strings corresponding to unseen reviews  \n","  \"\"\"\n","  preprocessed_sample = preprocess(unpreprocessed_data)\n","  sample_tfidf = tfidf_vectorizer.transform(preprocessed_sample)\n","  return trained_skmodel.predict(sample_tfidf)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_qmGbL6OwWW8","colab_type":"code","outputId":"183257da-605f-4a7f-87d9-df354d564d65","executionInfo":{"status":"ok","timestamp":1575266224781,"user_tz":360,"elapsed":328,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tfidf_predict_rating_logistic(clf400, vectorizer, ['This food was amazing. I love it!', 'EWWWWW....Never coming back to this place!', 'The food was Okay', 'This place was wonderful! Located in downtown Houston off Dallas Street, this is a new restaurant that I think will be a success in our area. The service was great. Our waiter, Brandon, was awesome. He gave us some great suggestions for dinner and drinks. For appetizers, I ordered the tuna, oysters and cheese board and all of them were delicious!! The tuna sashimi was perfectly reddish pink and thinly sliced, it almost melted im my mouth! I wanted to lick the plate after the ponzo and sel gris, that so tasty. Next i had, oysters which were so fresh and the right size. I didn\\'t get a chance to ask where the originated from but that didn\\'t matter because it was a great dozen. Lastly, the charcuterie selection gave you an offering of cow, sheep and goat milk\\'s cheese and a scoop or pear jelly, were the notable pieces. Now to the main dish, I ordered the Roasted Texas Redfish presented on the half shell with a lump of crab and gulf shrimp. My sides were crispy brussels and black truffle mac & cheese. Fun fact, the sides are served family style, gives you a chnace to share with your friends and try their food! My redfish was absolutely delicious and they surprisingly topped it off with some popcorn and it gave it some added texture and flavor. The dish had a  sauce pontchartrain that tied together the shrimp, crab and redfish without having an overbearing fishy taste to it. The shrimp were huge and I had enough to take home for lunch the next day!! I totally recommend Guard & Grace to anyone looking for that new spot for happy hour or   your wanting to try some delicious food. I can see myself coming here again for date night!!! You have to give this place a try because it was awesome! It\\'s Houston newest spot!! Bianca', 'ANYONE THAT TRIES TO SELL FAJITAS IN SOUTH TEXAS FOR $400.00 A PERSON IS EITHER AN IDIOT OR A POMPAUS JERK.  I AM sure this overpriced arrogant \"restaurant\" will meet the social needs of some Houstonians, but I am also just as sure for the vast eating out public in Houston,  this overpriced place to eat will be avoided like the plague!!'])"],"execution_count":172,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5., 1., 3., 5., 1.])"]},"metadata":{"tags":[]},"execution_count":172}]},{"cell_type":"code","metadata":{"id":"Y3gdy4Fv7Kc4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"outputId":"b8cc3bbb-1f59-4494-84bb-c08fdac9a3c7","executionInfo":{"status":"error","timestamp":1575262106870,"user_tz":360,"elapsed":62110,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["with open(root_path + 'trimmed_review.json') as json_file: # Open json file to load\n","    d = json.load(json_file)"],"execution_count":124,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-124-b6133f2e746e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot_path\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'trimmed_review.json'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mjson_file\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# Open json file to load\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Review:Rating'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not str"]}]},{"cell_type":"code","metadata":{"id":"TTGliOso71ou","colab_type":"code","colab":{}},"source":["df_all = pd.DataFrame(d.get('Review:Rating'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"68_bFqT28iw3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":166},"outputId":"152a0911-355c-45ea-8f91-a74fa72fb40e","executionInfo":{"status":"ok","timestamp":1575262280451,"user_tz":360,"elapsed":341,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["df_all.head(4)"],"execution_count":131,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>stars</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Total bill for this horrible service? Over $8G...</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>I *adore* Travis at the Hard Rock's new Kelly ...</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>I have to say that this office really has it t...</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Went in for a lunch. Steak sandwich was delici...</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review  stars\n","0  Total bill for this horrible service? Over $8G...    1.0\n","1  I *adore* Travis at the Hard Rock's new Kelly ...    5.0\n","2  I have to say that this office really has it t...    5.0\n","3  Went in for a lunch. Steak sandwich was delici...    5.0"]},"metadata":{"tags":[]},"execution_count":131}]},{"cell_type":"code","metadata":{"id":"nB8hKQmf8Y_T","colab_type":"code","colab":{}},"source":["external_X_test = df_all['review'][150001:160002]\n","external_Y_test = df_all['stars'][150001:160002]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6JpUMr79896c","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"14436203-f236-4a8d-a687-99649c557bfa","executionInfo":{"status":"ok","timestamp":1575262559260,"user_tz":360,"elapsed":69626,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["preprocessed_sample_external = preprocess(external_X_test)\n","sample_tfidf_external = vectorizer.transform(preprocessed_sample_external)\n","predicted_external = clf400.predict(sample_tfidf_external)\n","print(\"Multinomial Logistic Regression Test Accuracy:\", np.mean(predicted_external == external_Y_test))"],"execution_count":138,"outputs":[{"output_type":"stream","text":["Multinomial Logistic Regression Test Accuracy: 0.6618338166183382\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AquumlZt-GDr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5d04eefb-fcba-4c99-c0d8-8e93ef3360c8","executionInfo":{"status":"ok","timestamp":1575262649734,"user_tz":360,"elapsed":288,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":[""],"execution_count":139,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.0"]},"metadata":{"tags":[]},"execution_count":139}]},{"cell_type":"code","metadata":{"id":"Sp-2X-kG96Kd","colab_type":"code","colab":{}},"source":["d_predicted = {1.0 : 0, 2.0 : 0, 3.0 : 0, 4.0 : 0, 5.0 : 0}\n","for item in predicted_external:\n","  d_predicted[item] += 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mlDdtqm5-TUa","colab_type":"code","colab":{}},"source":["d_actual = {1.0 : 0, 2.0 : 0, 3.0 : 0, 4.0 : 0, 5.0 : 0}\n","for item in external_Y_test:\n","  d_actual[item] += 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bGmMmssG-hBb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"9b67150a-9e70-4e69-ae9e-d76b61d2c632","executionInfo":{"status":"ok","timestamp":1575262759119,"user_tz":360,"elapsed":204,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["d_predicted"],"execution_count":143,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1.0: 1659, 2.0: 503, 3.0: 838, 4.0: 1935, 5.0: 5066}"]},"metadata":{"tags":[]},"execution_count":143}]},{"cell_type":"code","metadata":{"id":"BO1NZhyh-jgF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"ee24b73e-6ccd-42f2-a5ec-41a645ad6d81","executionInfo":{"status":"ok","timestamp":1575262766141,"user_tz":360,"elapsed":331,"user":{"displayName":"Daniel Tang","photoUrl":"","userId":"09540227816050740255"}}},"source":["d_actual"],"execution_count":144,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1.0: 1544, 2.0: 815, 3.0: 1053, 4.0: 2209, 5.0: 4380}"]},"metadata":{"tags":[]},"execution_count":144}]},{"cell_type":"code","metadata":{"id":"oAeaH3kCNz50","colab_type":"code","colab":{}},"source":["#saving our model to a file with pickle\n","import pickle\n","filename_log_model = root_path + 'trained_mult_logistic_reg_model_tfidf_Py3.sav'\n","pickle.dump(clf400, open(filename_log_model, 'wb'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5iqTnOJGO7GO","colab_type":"code","colab":{}},"source":["filename_tfidf_vectorizer = root_path + 'tfidf_vectorizer_Py3.sav'\n","pickle.dump(vectorizer, open(filename_tfidf_vectorizer, 'wb'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UJSRBIGBQToe","colab_type":"code","colab":{}},"source":["filename_log_model = root_path + 'trained_mult_logistic_reg_model_tfidf_Py2.sav'\n","pickle.dump(clf400, open(filename_log_model, 'wb'), protocol=2)\n","filename_tfidf_vectorizer = root_path + 'tfidf_vectorizer_Py2.sav'\n","pickle.dump(vectorizer, open(filename_tfidf_vectorizer, 'wb'), protocol=2)"],"execution_count":0,"outputs":[]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CountVectorizer","provenance":[{"file_id":"1lA_G11CLzCdHdY3sfXdmISaVwIDwPf15","timestamp":1575146800182},{"file_id":"1Nhq2MohlePHJ-FpZWsKP8BI8MZkEBNAJ","timestamp":1575145814698}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"BqpW0ZHo7d_X","colab_type":"code","colab":{}},"source":["import json\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import scipy\n","import pickle"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FMWwQj0lCZqM","colab_type":"code","outputId":"faf2acb3-1cdb-4907-f075-95a9264432ba","executionInfo":{"status":"ok","timestamp":1575344742118,"user_tz":360,"elapsed":16342,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":169}},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WkuM52PSZDPA","colab_type":"code","outputId":"84a5361b-72d2-4445-f934-b4359ab6e6cb","executionInfo":{"status":"ok","timestamp":1575338891883,"user_tz":360,"elapsed":206,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":74}},"source":["\"/content/drive/My Drive/DSCI 303 Final Project/Data_Trimming/preprocessed_150k_reviews.json\""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/My Drive/DSCI 303 Final Project/Data_Trimming/preprocessed_150k_reviews.json'"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"yEFiNGrj8AML","colab_type":"code","colab":{}},"source":["root_path = 'drive/My Drive/DSCI 303 Final Project/Data Trimming/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"87BBVK8e6Si_","colab":{}},"source":["# with open(root_path + 'preprocessed_150k_reviews.json') as json_file2: # Open json file to load\n","with open (\"/content/drive/My Drive/DSCI 303 Final Project/Data_Trimming/preprocessed_150k_reviews.json\") as json_file2:\n","    data2 = json.load(json_file2)\n","    data3 = json.loads(data2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"C-q-gplK6SSQ","colab":{}},"source":["df = pd.DataFrame.from_dict(data3)\n","X_raw = df['review']\n","Y_raw = df['stars']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HPEvk8zv5w64","colab_type":"code","colab":{}},"source":["from sklearn.feature_extraction.text import CountVectorizer"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kV2D_qzMAQtd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":181},"outputId":"208219b1-9fe2-4d57-e7ce-acd04878837d","executionInfo":{"status":"error","timestamp":1575344777819,"user_tz":360,"elapsed":348,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}}},"source":["vectorizer = CountVectorizer()\n","X = vectorizer.fit_trasnform(X_raw)"],"execution_count":6,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-ac9305ec96c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mvectorizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCountVectorizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvectorizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_trasnform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_raw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'CountVectorizer' object has no attribute 'fit_trasnform'"]}]},{"cell_type":"code","metadata":{"id":"gq-7_mmTlz13","colab_type":"code","colab":{}},"source":["file_dump = open(\"vectorizer\", 'wb')\n","\n","pickle.dump(vectorizer, file_dump)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xd7JiONWAmVN","colab_type":"code","outputId":"ff4c8457-3661-442d-ca3a-3f28cbf28e0d","executionInfo":{"status":"ok","timestamp":1575340857721,"user_tz":360,"elapsed":226,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["X"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<150000x67816 sparse matrix of type '<class 'numpy.int64'>'\n","\twith 6869739 stored elements in Compressed Sparse Row format>"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"52Pc72TWhK05","colab_type":"code","colab":{}},"source":["scipy.sparse.save_npz(\"X\",X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wy0wKFCcBAJY","colab_type":"code","colab":{}},"source":["Y = Y_raw"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8ciFri1RhD-Z","colab_type":"code","colab":{}},"source":["np.save(\"Y\",Y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tRZGyAnnAucl","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import confusion_matrix, accuracy_score\n","# from sklearn.model_selection import GridSearchCV"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iw3AgvxTA7fh","colab_type":"code","colab":{}},"source":["x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=101)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BKXt7kyTZN4y","colab_type":"code","outputId":"08b13df9-f2ff-4c47-936b-c1aea763c309","colab":{"base_uri":"https://localhost:8080/","height":171}},"source":["# Logistic Regression\n","from sklearn.linear_model import LogisticRegression\n","log_reg_accs = []\n","for pen in ['l1', 'l2', 'elasticnet','none']:\n","  log_reg = LogisticRegression(penalty = pen, random_state=0, multi_class = 'multinomial', solver = 'saga')\n","  log_reg_scores = cross_val_score(log_reg, x_train, y_train, cv=10)\n","  print(log_reg_scores)\n","  log_reg_accs.append(log_reg_scores)\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/sag.py:337: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  \"the coef_ did not converge\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"KtC1rDA3KlCE","colab_type":"code","colab":{}},"source":["# Multinomial Naive Bayes\n","from sklearn.naive_bayes import MultinomialNB"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"G6IvgHIBGjF0","colab_type":"code","outputId":"86099b29-37fa-4a82-ac9a-6bb4b2deb3ab","executionInfo":{"status":"ok","timestamp":1575232144805,"user_tz":360,"elapsed":2506,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Cross validation for MNB\n","\n","from sklearn.model_selection import cross_val_score\n","mnb = MultinomialNB()\n","mnb_cv_scores = cross_val_score(mnb, x_train, y_train, cv=10)\n","print(mnb_cv_scores)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0.59756707 0.59840027 0.59631728 0.59773371 0.60075    0.59741667\n"," 0.59383333 0.59134856 0.59431525 0.59998333]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O1IqX7IcBB4T","colab_type":"code","outputId":"0ff22c21-3ab0-4b4e-c9f0-c711b71aee45","executionInfo":{"status":"ok","timestamp":1575229863863,"user_tz":360,"elapsed":944,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":340}},"source":["# MBN Test set!\n","mnb = MultinomialNB()\n","mnb.fit(x_train,y_train)\n","predmnb = mnb.predict(x_test)\n","print(\"Confusion Matrix for Multinomial Naive Bayes:\")\n","print(confusion_matrix(y_test,predmnb))\n","print(\"Score:\",round(accuracy_score(y_test,predmnb)*100,2))\n","print(\"Classification Report:\",classification_report(y_test,predmnb))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Confusion Matrix for Multinomial Naive Bayes:\n","[[3101  747  292  120  117]\n"," [ 656  556  721  317  108]\n"," [ 326  290 1028 1308  300]\n"," [ 255  104  510 3983 1831]\n"," [ 647   51  124 3275 9233]]\n","Score: 59.67\n","Classification Report:               precision    recall  f1-score   support\n","\n","         1.0       0.62      0.71      0.66      4377\n","         2.0       0.32      0.24      0.27      2358\n","         3.0       0.38      0.32      0.35      3252\n","         4.0       0.44      0.60      0.51      6683\n","         5.0       0.80      0.69      0.74     13330\n","\n","    accuracy                           0.60     30000\n","   macro avg       0.51      0.51      0.51     30000\n","weighted avg       0.61      0.60      0.60     30000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4OIjWyxnBDO_","colab_type":"code","colab":{}},"source":["# Random Forest\n","from sklearn.ensemble import RandomForestClassifier\n","random_forest_cv_avg_accs = []"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zn2zs5HGGzvf","colab_type":"code","outputId":"b6fc546d-dc4b-4540-d270-ebdb3eed4a8f","colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["# Cross validation for Random Forest Classifier\n","for n_trees in np.arange(10,160,20):\n","  rfc = RandomForestClassifier(n_estimators = n_trees)\n","  rfc_cv_scores = cross_val_score(rfc, x_train, y_train, cv=8)\n","  print(\"CV with {} trees:\".format(n_trees))\n","  print(rfc_cv_scores)\n","  random_forest_cv_avg_accs.append(np.mean(rfc_cv_scores))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["CV with 10 trees:\n","[0.535031   0.54786667 0.5446     0.5446     0.54373333 0.5338\n"," 0.53466667 0.54370291]\n","CV with 30 trees:\n","[0.57669489 0.57793333 0.57466667 0.57393333 0.5706     0.56953333\n"," 0.5712     0.57357157]\n","CV with 50 trees:\n","[0.58016132 0.5836     0.5784     0.57726667 0.5752     0.57606667\n"," 0.58       0.57983866]\n","CV with 70 trees:\n","[0.57856143 0.5808     0.57906667 0.58006667 0.5832     0.5788\n"," 0.58553333 0.58110541]\n","CV with 90 trees:\n","[0.57876142 0.57926667 0.57993333 0.58293333 0.58013333 0.5814\n"," 0.58166667 0.58417228]\n","CV with 110 trees:\n","[0.57969469 0.58406667 0.58073333 0.58186667 0.58246667 0.5792\n"," 0.5822     0.58543903]\n","CV with 130 trees:\n","[0.58036131 0.5834     0.58226667 0.58266667 0.57953333 0.5792\n"," 0.5818     0.58010534]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Epw02RSJEidg","colab_type":"code","colab":{}},"source":["plt.plot(np.arange(10,160,20), random_forest_cv_avg_accs)\n","plt.title(\"Random Forest CV Avg Accuracy vs. number of trees\")\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xdqvPbJ3DF4t","colab_type":"code","colab":{}},"source":["# Test set!!!\n","chosen_n_trees = \n","\n","rmfr = RandomForestClassifier(n_estimators = chosen_n_trees)\n","rmfr.fit(x_train,y_train)\n","predrmfr = rmfr.predict(x_test)\n","print(\"Confusion Matrix for Random Forest Classifier:\")\n","print(confusion_matrix(y_test,predrmfr))\n","forest_acc = round(accuracy_score(y_test,predrmfr)*100,2)\n","print(\"Score:\", forest_acc)\n","print(\"Classification Report:\",classification_report(y_test,predrmfr))\n","random_forest_accs.append(forest_acc)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jmpXv9Z5BHdu","colab_type":"code","colab":{}},"source":["# K Nearest Neighbour Algorithm\n","from sklearn.neighbors import KNeighborsClassifier\n","knn_cv_avg_accs = []"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XqntY9nHKXn_","colab_type":"code","colab":{}},"source":["# KNN CV\n","\n","for k_n in np.arange(10,60,10):\n","  knn = KNeighborsClassifier(n_neighbors=k_n)\n","  knn_cv_scores = cross_val_score(knn, x_train, y_train, cv=8)\n","  print(\"CV with {} neighbors:\".format(k_n))\n","  print(knn_cv_scores)\n","  knn_cv_avg_accs.append(np.mean(knn_cv_scores))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uF7XImOEEM9W","colab_type":"code","colab":{}},"source":["# KNN test set!\n","knn_optimal_k = \n","\n","knn = KNeighborsClassifier(n_neighbors=knn_optimal_k )\n","knn.fit(x_train,y_train)\n","predknn = knn.predict(x_test)\n","print(\"Confusion Matrix for K Neighbors Classifier:\")\n","print(confusion_matrix(y_test,predknn))\n","knn_acc = round(accuracy_score(y_test,predknn)*100,2)\n","print(\"Score: \",knn_acc)\n","print(\"Classification Report:\")\n","print(classification_report(y_test,predknn))\n","knn_accs.append(knn_acc)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eHuWLqeQCX07","colab_type":"code","colab":{}},"source":["file_read = open('vectorizer', 'rb')\n","hi = pickle.load(file_read)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6PmtKPfSnpRp","colab_type":"code","outputId":"bdc62a0b-5bf1-451d-924a-6e451cf54bd1","executionInfo":{"status":"ok","timestamp":1575340645093,"user_tz":360,"elapsed":309,"user":{"displayName":"Patrick Han","photoUrl":"","userId":"12394479027762114630"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["hi"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n","                dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n","                lowercase=True, max_df=1.0, max_features=None, min_df=1,\n","                ngram_range=(1, 1), preprocessor=None, stop_words=None,\n","                strip_accents=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b',\n","                tokenizer=None, vocabulary=None)"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"wbvq-usBnplL","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}